# This is a basic mule workflow 
name: Mule Project 1 - WF

#Creating global environment variables
env:
  projectname: mule-project-1
  application_name: mule-project-1
  
  #Some global variables which we might need later for more flexibility (variables should be declared containing [A-Za-Z0-9_])
#   app_runtime: '4.4.0'
#   cloudhub_region: us-west-2
#   worker_type: MICRO
#   worker_count: '1'
  
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events for the given branches
  push:
    branches: [ main , test , dev ]
    paths: mule-project-1/**
#   pull_request:
#     branches: [ main , test , dev ]
#     paths: mule-project-1/**
#     types: [ closed ]
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest
    environment: dev
    env:
      username: ${{ secrets.USERNAME }}
      password: ${{ secrets.PASSWORD }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Checking Cache
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/$projectname/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build with Maven
        run: |
          cd $projectname
          mvn clean -B package -s "../.mvn/settings.xml"
      - name: Stamp artifact file name with commit hash
        run: |
          cd $projectname
          artifactName1=$(ls target/*.jar | head -1)
          commitHash=$(git rev-parse --short "$GITHUB_SHA")
          artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")
          mv $artifactName1 $artifactName2
      - name: Upload artifact
        uses: actions/upload-artifact@master
        with:
            name: artifacts
            path: ${{ env.projectname }}/target/*.jar
            
  development-build-deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    #Checks if branch is proper or not
    if: github.ref == 'refs/heads/dev'
    
    #specifing the Github Environment to fetch secrets from
    environment: development      #This needs to be created as Environment in the Settings tab of repository 
    
    #Specifing local variables including secrets
    env:
      username: ${{ secrets.USERNAME }}
      password: ${{ secrets.PASSWORD }}
    #Some environment dependent variables which we might need later for more flexibility (variables should be declared containing [A-Za-Z0-9_])
#         mule_env: dev
#         org_id: <<<>>>
#         cloud_env: Sandbox
#         secret_key: ${{ secrets.SECRET_KEY }}
#         app_clientId: <<<>>>
#         app_clientSecret: ${{ secrets.APP_CLIENT_SECRET }}
#         platform_client_id: <<<>>>
#         platform_client_secret: ${{ secrets.PLATFORM_CLIENT_SECRET }}
#         agent_enabled: 'true'
        
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('$projectname/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          
      # Runs a single command using the runners shell
      - name: Execute Mule Deploy
        run: |
          cd $projectname
          artifactName=$(ls *.jar | head -1)
          mvn test deploy -DmuleDeploy -Dmule.artifact=$artifactName -s "../.mvn/settings.xml" -Dapplication_name=$application_name -Dusername=$username -Dpassword=$password
  
  test-build-deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    #Checks if branch is proper or not
    if: github.ref == 'refs/heads/test'
    
    #specifing the Github Environment to fetch secrets from
    environment: development      #This needs to be created as Environment in Settings tab of repository 
    
    #Specifing local variables including secrets
    env:
      username: ${{ secrets.USERNAME }}
      password: ${{ secrets.PASSWORD }}
    #Some environment dependent variables which we might need later for more flexibility (variables should be declared containing [A-Za-Z0-9_])
#         mule_env: dev
#         org_id: <<<>>>
#         cloud_env: Sandbox
#         secret_key: ${{ secrets.SECRET_KEY }}
#         app_clientId: <<<>>>
#         app_clientSecret: ${{ secrets.APP_CLIENT_SECRET }}
#         platform_client_id: <<<>>>
#         platform_client_secret: ${{ secrets.PLATFORM_CLIENT_SECRET }}
#         agent_enabled: 'true'
        
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('$projectname/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          
      # Runs a single command using the runners shell
      - name: Execute Mule Deploy
        run: |
          cd $projectname
          mvn package deploy -DskipMunitTests -DmuleDeploy -Dapplication_name=$application_name -Dusername=$username -Dpassword=$password

  prod-build-deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    #Checks if branch is proper or not
    if: github.ref == 'refs/heads/prod'
    
    #specifing the Github Environment to fetch secrets from
    environment: development      #This needs to be created as Environment in Settings tab of repository 
    
    #Specifing local variables including secrets
    env:
      username: ${{ secrets.USERNAME }}
      password: ${{ secrets.PASSWORD }}
    #Some environment dependent variables which we might need later for more flexibility (variables should be declared containing [A-Za-Z0-9_])
#         mule_env: dev
#         org_id: <<<>>>
#         cloud_env: Sandbox
#         secret_key: ${{ secrets.SECRET_KEY }}
#         app_clientId: <<<>>>
#         app_clientSecret: ${{ secrets.APP_CLIENT_SECRET }}
#         platform_client_id: <<<>>>
#         platform_client_secret: ${{ secrets.PLATFORM_CLIENT_SECRET }}
#         agent_enabled: 'true'
        
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('$projectname/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          
      # Runs a single command using the runners shell
      - name: Execute Mule Deploy
        run: |
          cd $projectname
          mvn package deploy -DskipMunitTests -DmuleDeploy -Dapplication_name=$application_name -Dusername=$username -Dpassword=$password

          
